library(readr)
brain_df <- read_csv("brain_df.csv")
View(brain_df)
data <-brain_df
install.packages("caTools")
library(caTools)
install.packages("caret")
install.packages("caret")
library(caret)
#make this example reproducible
set.seed(0)
#split into training (80%) and testing set (20%)
parts = createDataPartition(data$CDR, p = .8, list = F)
train = data[parts, ]
test = data[-parts, ]
#define predictor and response variables in training set
train_x = data.matrix(train[, -9])
train_y = train[,9]
#define predictor and response variables in testing set
test_x = data.matrix(test[, -9])
test_y = test[, 9]
train_x
train_y
install.packages("xgboost")
install.packages("Matrix")
install.packages("Matrix")
library(Matrix)
install.packages("magrittr")
install.packages("magrittr")
#define final training and testing sets
xgb_train = xgb.DMatrix(data = train_x, label = train_y)
xgb_test = xgb.DMatrix(data = test_x, label = test_y)
library(xgboost)
#define final training and testing sets
xgb_train = xgb.DMatrix(data = train_x, label = train_y)
xgb_test = xgb.DMatrix(data = test_x, label = test_y)
#define final training and testing sets
xgb_train = xgb.DMatrix(data = train_x, label = train_y$CDR)
xgb_test = xgb.DMatrix(data = test_x, label = test_y$CDR)
#define watchlist
watchlist = list(train=xgb_train, test=xgb_test)
#fit XGBoost model and display training and testing data at each round
model_xgb = xgb.train(data = xgb_train, max.depth = 1, watchlist=watchlist, nrounds = 10)
# predict values in test set
pred_y <- predict(model_xgb, data.matrix(test_y))
# predict values in test set
pred_y <- predict(model_xgb, xgb_test)
table(pred_y)
table(test_y)
#fit XGBoost model and display training and testing data at each round
model_xgb = xgb.train(data = xgb_train, max.depth = 2, watchlist=watchlist, nrounds = 10)
# predict values in test set
pred_y <- predict(model_xgb, xgb_test)
table(pred_y)
savehistory("/cloud/project/Best_history.Rhistory")
